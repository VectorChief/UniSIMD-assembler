================================================================================

To build SIMD test framework on Linux, open terminal window,
go to UniSIMD's "test" subfolder,
make sure necessary tools and libraries are installed
    sudo apt-get update
for native builds (binary ABI matches host):
    sudo apt-get install make g++
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib
run for x86 architecture:
    make -f simd_make_x86.mk -j4
    ./simd_test.x86
run for x64 architecture:
    make -f simd_make_x64.mk -j4
    ./simd_test.x64f32
run for non-x86 architectures:
    make -f simd_make_***.mk -j4
    ./simd_test.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
By default, DEB-based distributions (Mint, Ubuntu, Debian) are implied,
refer to the AArch64 Linux section at the bottom for RPM-based options.

To build SIMD test framework on macOS, open terminal window,
go to UniSIMD's "test" subfolder,
make sure necessary tools and libraries are installed:
http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/
    xcode-select --install
run for x64 architecture:
    make -f simd_make_x64.mk -j4
    ./simd_test.x64f32

To build SIMD test framework on Windows,
go to UniSIMD's "test" subfolder and open (in Visual C++ 6.0 or later):
    simd_workspace.dsw
In newer versions of VC++ agree to convert workspace files.
Exit and open newly created solution file for development.
Select "Release" build target in drop-down list/menus, then press F5.
More recent versions (VS2017) need a few extra steps to complete the build.
Right-click on the Solution in the Solution Explorer window on the left
and select "Retarget solution", choose Windows SDK Version "10.0.15063.0",
then select "Build" -> "Rebuild Solution" from the top-level menu, not F5.
Run produced binary simd_test.exe in "test" subfolder from Windows Explorer.
VS2019 automatically retargets solution to the latest installed Windows SDK.

To build SIMD test framework for 64-bit Windows,
download and install TDM64-GCC toolchain (tdm64-gcc-5.1.0-2.exe),
then open UniSIMD's "test" subfolder and run from "cmd" or Windows Explorer:
    simd_make_w64.bat
produced simd_test_w64f32.exe binary file will launch upon build completion.

================================================================================

To build QEMU emulator from source on Linux, download the latest version from:
    http://wiki.qemu.org/Download
unpack the archive, open terminal window, go to QEMU's root folder,
make sure necessary tools and libraries are installed:
    sudo apt-get update
    sudo apt-get install make g++
    sudo apt-get install pkg-config libglib2.0-dev libpixman-1-dev zlib1g-dev
when building QEMU on RPM-based systems like openSUSE:
    sudo zypper install make gcc-c++
    sudo zypper install patch glib2-devel libpixman-1-0-devel zlib-devel
when building QEMU 3.0.0 for SVE targets apply patch for sve-max-vq cpu property
from https://patchwork.kernel.org/patch/10541199/  (scroll down and click diff):
    patch -p1 < ../for-3.0-target-arm-Add-sve-max-vq-cpu-property-to--***.diff
run configure script:
    ./configure
to build a reduced set of targets for linux-user mode emulation only, use:
    ./configure --target-list=arm-linux-user,aarch64-linux-user,\
mips-linux-user,mipsel-linux-user,mips64-linux-user,mips64el-linux-user,\
ppc-linux-user,ppc64abi32-linux-user,ppc64-linux-user,ppc64le-linux-user,\
i386-linux-user,x86_64-linux-user
    (copy the whole multi-line command above without leading or trailing spaces)
    (paste into terminal and run after or instead of plain ./configure script)
run multithreaded make (use -j8 or -j16 on machines with higher core count):
    make -j4
run installation script:
    sudo make install

When building QEMU from source isn't necessary install full binary package:
    sudo apt-get install qemu-user
on RPM-based systems like openSUSE:
    sudo zypper install qemu

To test SVE targets with QEMU 3.x.y or patched version of QEMU 3.0.0 run:
    qemu-aarch64 -cpu max,sve-max-vq=4 simd_test.a64f32sve -c 1

The most recent QEMU 4.2.0 has been the most stable and feature complete so far,
while versions 4.x.y prior to 4.2.0 showed issues with POWER8/9 fp32 LE targets.

Use "-c 1" option to reduce test time when emulating with QEMU.

================================================================================

To emulate future x86 targets (AVX-512) on modern x86 Linux hosts use Intel SDE:
    http://software.intel.com/en-us/articles/intel-software-development-emulator
download and unpack the archive.

In terminal window for 32-bit x86 run:
    path-to-kit/sde   -snb -- ./simd_test.x86avx -c 1
    path-to-kit/sde   -knl -- ./simd_test.x86avx512 -c 1
for AVX (Sandy Bridge) and AVX512F (Knights Landing) respectively.

In terminal window for 64-bit x64 run:
    path-to-kit/sde64 -hsw -- ./simd_test.x64f32avx -c 1
    path-to-kit/sde64 -skx -- ./simd_test.x64f32avx512 -c 1
for AVX2 (Haswell) and AVX512DQ (Skylake-X) respectively.

Use "-c 1" option to reduce test time when emulating with Intel SDE.

================================================================================

To experiment with Linux in AArch64 mode on Raspberry Pi 3 consider:

1) Devuan ASCII 2.0.0 plain (arm64 raspi3) image from 06-Jun-2018:
    https://devuan.org/
    https://files.devuan.org/devuan_ascii/embedded/
    devuan_ascii_2.0.0_arm64_raspi3.img.xz
image boot credentials:
    login: root
    password: toor

2) openSUSE Leap15.0 XFCE (aarch64 raspi3) image from 02-Jul-2018:
    https://en.opensuse.org/HCL:Raspberry_Pi3
    http://download.opensuse.org/ports/aarch64/distribution/leap/15.0/appliances
    openSUSE-...-ARM-XFCE-raspberrypi3.aarch64-2018.07.02-Buildlp150.1.1.raw.xz
image boot credentials:
    login: root
    password: linux

Flashing images above to an SD card is similar to a Raspbian installation:
http://www.raspberrypi.org/documentation/installation/installing-images/linux.md
    lsblk (before inserting SD card)
    lsblk (after inserting SD card to see its device ID, mmcblk0 in this case)
    sudo su
    umount /dev/mmcblk0p1 (if exists and mounted, unmount partition: p1)
    umount /dev/mmcblk0p2 (if exists and mounted, unmount partition: p2)
    (change to Downloads directory where image file is unpacked)
    dcfldd bs=4M if=devuan_ascii_2.0.0_arm64_raspi3.img of=/dev/mmcblk0
    sync (before extracting SD card from the slot)
    exit (from super-user mode)

Devuan image requires partition resizing once booted (credentials above):
http://elinux.org/RPi_Resize_Flash_Partitions (performed on RPi using fdisk)
    fdisk /dev/mmcblk0
    p (to see the current partition table)
    d (answer: 2, to delete partition 2)
    (for swap leave some space at the end by subtracting 1M from default sector)
    n (answer: p, for primary; answer: 2, for new partition 2; <enter>; <enter>)
    (when fdisk asks to remove ext4 signature at the end, answer: N, to keep it)
    (create new partition 3 as 2, from the space left at the end of the SD card)
    (t 3, to change partition type from 83 "Linux" to 82 "Linux-swap / Solaris")
    w (writes the changes and quits fdisk)
    shutdown -r now (login again after reboot)
    resize2fs /dev/mmcblk0p2
    df -h (to check the new partition size)
    (mkswap /dev/mmcblk0p3)
    (add "/dev/mmcblk0p3 none swap sw 0 0" to /etc/fstab to auto-swapon at boot)
to install XFCE once the partition is resized:
    (commands below are not prefixed with "sudo" as image is booted into "root")
    (using "apt" command instead of "apt-get" allows to save space on SD card)
    apt-get update
    apt install xfce4 (choose keyboard layout)
    reboot (for XFCE to honour chosen keyboard layout)
    startx (choose "Use default config" on first start)
    (launch terminal window in XFCE from the bottom panel)
    apt install firefox-esr unzip
    reboot (login again and "startx" into XFCE)
    (firefox is now available under "Internet" section of the main menu)
    apt install make g++ clang
to setup ARM Instruction Emulator for SVE on AArch64 hosts install modules:
    apt install environment-modules
    reboot (login again and "startx" into XFCE)
    (modules only work outside of XFCE, use "Log Out" to configure modules)
    (once armie module is loaded, use startx again to work with it in XFCE)

openSUSE image is RPM based & boots directly to XFCE (credentials above):
    (commands below are not prefixed with "sudo" as image is booted into "root")
    (Raspberry Pi 3 Model B+ doesn't have networking with openSUSE, use old one)
    zypper install MozillaFirefox
    reboot (and login again)
    (firefox is now available under "Internet" section of the main menu)
    zypper install make gcc-c++ clang
to setup ARM Instruction Emulator for SVE on AArch64 hosts, install modules:
    zypper install Modules
    reboot (and login again)
adjust UniSIMD's makefiles to use g++ instead of triplet name, remove -static
    leafpad simd_make_a64.mk & (once archive is downloaded as shown below)

Download the archive from github.com and unpack it (in terminal window):
    cd Downloads
    (alternatively to using a browser for downloading, use wget from terminal)
    (wget https://github.com/VectorChief/UniSIMD-assembler/archive/master.zip)
    (mv master.zip UniSIMD-assembler-master.zip)
    unzip UniSIMD-assembler-master.zip
    cd UniSIMD-assembler-master/test
    make -f simd_make_a64.mk -j4
    ./simd_test.a64f32

Download the ARM IE and install it (Ubuntu16.04 for Devuan, SUSE12 for SUSE):
https://developer.arm.com/products/software-development-tools/
                                        /hpc/arm-instruction-emulator/download
    cd Downloads
    tar -xvf ARM-Instruction-Emulator_18.3_AArch64_***_aarch64.tar.gz
    cd ARM-Instruction-Emulator_18.3_AArch64_***_aarch64
    ./arm-instruction-emulator-18.3_Generic-AArch64_***_aarch64-linux-***.sh
    (scroll down and type: yes <enter>, when license shows up on the screen)
    reboot (and login again)
    module use /opt/arm/modulefiles
    module avail
    module load Generic-AArch64/***/arm-instruction-emulator/18.3
    (armie should now be available in the PATH variable, check vector lengths)
    armie -mlist-vector-lengths

To test SVE targets with ARM Instruction Emulator run:
    armie -msve-vector-bits=512 -- ./simd_test.a64f32sve -c 1

Use "-c 1" option to reduce test time when emulating with ARM IE.

Devuan ASCII 2.0.0 image has USB flash drives automount, but older clang 3.8.1,
it also allows setting CPU frequency scaling governor for maximum performance:
echo "performance" | tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
Current frequency (600Mhz min-level, 1200Mhz max-level) can be monitored using:
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq

openSUSE Leap15.0 image has newer clang, but no automount for USB flash drives,
it offers min-level CPU frequency by default and it lacks CPU scaling governor.
It also doesn't support networking on newer Raspberry Pi 3 Model B+ from 2018.
On the bonus side, modules can be configured from within XFCE as they should be.

Both images feature modern set of compilers sufficient for the build:
g++ 6.3.0, clang 3.8.1 (Devuan ASCII 2.0.0, clang prior to 3.8 was much slower)
g++ 7.3.1, clang 5.0.1 (openSUSE Leap15.0)
fresh Firefox 60.2.2esr browser and a 32bpp display output.

================================================================================

To experiment with Ubuntu Server on Raspberry Pi 4 consider:

1) Ubuntu Server 19.10.1 preinstalled (arm64 raspi3) image from 03-Dec-2019:
    http://cdimage.ubuntu.com/releases/19.10.1/release/
    ubuntu-19.10.1-preinstalled-server-arm64+raspi3.img.xz
image boot credentials:
    login: ubuntu
    password: ubuntu

Flash image to an SD card using "Disks -> Restore Disk Image" utility with GUI
from a regular Ubuntu desktop. It will unpack *.xz internally in the process.

Once booted the image will automatically resize the root partition to fully
utilize all space available on an SD card and request to change the password.

To setup networking on a freshly installed Ubuntu Server without ethernet cable
consider using "USB tethering" from an Android phone or an iPhone.

Plug in phone's USB cable to Raspberry Pi 4's USB slot and select
"USB tethering" option from phone's menu or in "Settings -> Personal Hotspot".

On Raspberry Pi 4 run the following command in the terminal:
    ip -c a
to list all the network interfaces. USB tethered option should be called:
    usb0
or
    eth1
In any case it shows up on the list once tethering is activated on the phone.

To complete setting up USB networking add interface names to the netplan:
    sudo nano /etc/netplan/50-cloud-init.yaml
Edit the file above so that it looks like this:
network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
        eth1:
            dhcp4: true
        usb0:
            dhcp4: true
    version: 2
Press Ctrl-O to write-out the changes and Ctrl-X to exit from the editor.

Apply the changes by typing:
    sudo netplan apply
Check the connection with:
    ping google.com
Press Ctrl-C to stop.

Once the networking is set up (only needs to be done once) install the desktop:
    sudo apt-get update
    sudo apt-get install ubuntu-mate-desktop
    reboot

================================================================================
